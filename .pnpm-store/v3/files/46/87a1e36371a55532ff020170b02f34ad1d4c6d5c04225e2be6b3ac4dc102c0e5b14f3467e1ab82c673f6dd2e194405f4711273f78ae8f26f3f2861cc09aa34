'use strict';

var minimist = require('minimist');
var kolorist = require('kolorist');
var vite = require('vite');
var server = require('./server.cjs');
var client = require('./client.cjs');
require('pathe');
require('fs');
require('mlly');
require('./utils.cjs');
require('url');
require('module');
require('vm');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var minimist__default = /*#__PURE__*/_interopDefaultLegacy(minimist);

const argv = minimist__default["default"](process.argv.slice(2), {
  "alias": {
    r: "root",
    c: "config",
    h: "help",
    w: "watch",
    s: "silent"
  },
  "--": true,
  "string": ["root", "config"],
  "boolean": ["help", "watch", "silent"],
  unknown(name) {
    if (name[0] === "-") {
      console.error(kolorist.red(`Unknown argument: ${name}`));
      help();
      process.exit(1);
    }
    return true;
  }
});
if (argv.help) {
  help();
  process.exit(0);
}
if (!argv._.length) {
  console.error(kolorist.red("No files specified."));
  help();
  process.exit(1);
}
process.argv = [...process.argv.slice(0, 2), ...argv["--"] || []];
run(argv);
function help() {
  console.log(`
Usage:
  $ vite-node [options] [files]

Options:
  -r, --root <path>      ${kolorist.dim("[string]")} use specified root directory
  -c, --config <file>    ${kolorist.dim("[string]")} use specified config file
  -w, --watch           ${kolorist.dim("[boolean]")} restart on file changes, similar to "nodemon"
  -s, --silent          ${kolorist.dim("[boolean]")} do not emit errors and logs
  --vue                 ${kolorist.dim("[boolean]")} support for importing Vue component
`);
}
async function run(options = {}) {
  const files = options.files || options._ || [];
  const server$1 = await vite.createServer({
    logLevel: "error",
    clearScreen: false,
    configFile: options.config,
    root: options.root
  });
  await server$1.pluginContainer.buildStart({});
  const node = new server.ViteNodeServer(server$1);
  const runner = new client.ViteNodeRunner({
    root: server$1.config.root,
    base: server$1.config.base,
    fetchModule(id) {
      return node.fetchModule(id);
    },
    resolveId(id, importer) {
      return node.resolveId(id, importer);
    }
  });
  await runner.executeId("/@vite/env");
  for (const file of files)
    await runner.executeFile(file);
  if (!options.watch)
    await server$1.close();
  server$1.watcher.on("change", async (eventName, path) => {
    console.log(kolorist.dim(`[${eventName}] ${path}`));
    Array.from(runner.moduleCache.keys()).forEach((i) => {
      if (!i.includes("node_modules"))
        runner.moduleCache.delete(i);
    });
    for (const file of files)
      await runner.executeFile(file);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmNqcyIsInNvdXJjZXMiOlsiLi4vc3JjL2NsaS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbWluaW1pc3QgZnJvbSAnbWluaW1pc3QnXG5pbXBvcnQgeyBkaW0sIHJlZCB9IGZyb20gJ2tvbG9yaXN0J1xuaW1wb3J0IHsgY3JlYXRlU2VydmVyIH0gZnJvbSAndml0ZSdcbmltcG9ydCB7IFZpdGVOb2RlU2VydmVyIH0gZnJvbSAnLi9zZXJ2ZXInXG5pbXBvcnQgeyBWaXRlTm9kZVJ1bm5lciB9IGZyb20gJy4vY2xpZW50J1xuXG5jb25zdCBhcmd2ID0gbWluaW1pc3QocHJvY2Vzcy5hcmd2LnNsaWNlKDIpLCB7XG4gICdhbGlhcyc6IHtcbiAgICByOiAncm9vdCcsXG4gICAgYzogJ2NvbmZpZycsXG4gICAgaDogJ2hlbHAnLFxuICAgIHc6ICd3YXRjaCcsXG4gICAgczogJ3NpbGVudCcsXG4gIH0sXG4gICctLSc6IHRydWUsXG4gICdzdHJpbmcnOiBbJ3Jvb3QnLCAnY29uZmlnJ10sXG4gICdib29sZWFuJzogWydoZWxwJywgJ3dhdGNoJywgJ3NpbGVudCddLFxuICB1bmtub3duKG5hbWU6IHN0cmluZykge1xuICAgIGlmIChuYW1lWzBdID09PSAnLScpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IocmVkKGBVbmtub3duIGFyZ3VtZW50OiAke25hbWV9YCkpXG4gICAgICBoZWxwKClcbiAgICAgIHByb2Nlc3MuZXhpdCgxKVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9LFxufSlcblxuaWYgKGFyZ3YuaGVscCkge1xuICBoZWxwKClcbiAgcHJvY2Vzcy5leGl0KDApXG59XG5cbmlmICghYXJndi5fLmxlbmd0aCkge1xuICBjb25zb2xlLmVycm9yKHJlZCgnTm8gZmlsZXMgc3BlY2lmaWVkLicpKVxuICBoZWxwKClcbiAgcHJvY2Vzcy5leGl0KDEpXG59XG5cbi8vIGZvcndhcmQgYXJndlxucHJvY2Vzcy5hcmd2ID0gWy4uLnByb2Nlc3MuYXJndi5zbGljZSgwLCAyKSwgLi4uKGFyZ3ZbJy0tJ10gfHwgW10pXVxuXG5ydW4oYXJndilcblxuZnVuY3Rpb24gaGVscCgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgY29uc29sZS5sb2coYFxuVXNhZ2U6XG4gICQgdml0ZS1ub2RlIFtvcHRpb25zXSBbZmlsZXNdXG5cbk9wdGlvbnM6XG4gIC1yLCAtLXJvb3QgPHBhdGg+ICAgICAgJHtkaW0oJ1tzdHJpbmddJyl9IHVzZSBzcGVjaWZpZWQgcm9vdCBkaXJlY3RvcnlcbiAgLWMsIC0tY29uZmlnIDxmaWxlPiAgICAke2RpbSgnW3N0cmluZ10nKX0gdXNlIHNwZWNpZmllZCBjb25maWcgZmlsZVxuICAtdywgLS13YXRjaCAgICAgICAgICAgJHtkaW0oJ1tib29sZWFuXScpfSByZXN0YXJ0IG9uIGZpbGUgY2hhbmdlcywgc2ltaWxhciB0byBcIm5vZGVtb25cIlxuICAtcywgLS1zaWxlbnQgICAgICAgICAgJHtkaW0oJ1tib29sZWFuXScpfSBkbyBub3QgZW1pdCBlcnJvcnMgYW5kIGxvZ3NcbiAgLS12dWUgICAgICAgICAgICAgICAgICR7ZGltKCdbYm9vbGVhbl0nKX0gc3VwcG9ydCBmb3IgaW1wb3J0aW5nIFZ1ZSBjb21wb25lbnRcbmApXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xpT3B0aW9ucyB7XG4gIGZpbGVzPzogc3RyaW5nW11cbiAgXz86IHN0cmluZ1tdXG4gIHJvb3Q/OiBzdHJpbmdcbiAgY29uZmlnPzogc3RyaW5nXG4gIHdhdGNoPzogYm9vbGVhblxufVxuXG5hc3luYyBmdW5jdGlvbiBydW4ob3B0aW9uczogQ2xpT3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGZpbGVzID0gb3B0aW9ucy5maWxlcyB8fCBvcHRpb25zLl8gfHwgW11cbiAgY29uc3Qgc2VydmVyID0gYXdhaXQgY3JlYXRlU2VydmVyKHtcbiAgICBsb2dMZXZlbDogJ2Vycm9yJyxcbiAgICBjbGVhclNjcmVlbjogZmFsc2UsXG4gICAgY29uZmlnRmlsZTogb3B0aW9ucy5jb25maWcsXG4gICAgcm9vdDogb3B0aW9ucy5yb290LFxuICB9KVxuICBhd2FpdCBzZXJ2ZXIucGx1Z2luQ29udGFpbmVyLmJ1aWxkU3RhcnQoe30pXG5cbiAgY29uc3Qgbm9kZSA9IG5ldyBWaXRlTm9kZVNlcnZlcihzZXJ2ZXIpXG5cbiAgY29uc3QgcnVubmVyID0gbmV3IFZpdGVOb2RlUnVubmVyKHtcbiAgICByb290OiBzZXJ2ZXIuY29uZmlnLnJvb3QsXG4gICAgYmFzZTogc2VydmVyLmNvbmZpZy5iYXNlLFxuICAgIGZldGNoTW9kdWxlKGlkKSB7XG4gICAgICByZXR1cm4gbm9kZS5mZXRjaE1vZHVsZShpZClcbiAgICB9LFxuICAgIHJlc29sdmVJZChpZCwgaW1wb3J0ZXIpIHtcbiAgICAgIHJldHVybiBub2RlLnJlc29sdmVJZChpZCwgaW1wb3J0ZXIpXG4gICAgfSxcbiAgfSlcblxuICAvLyBwcm92aWRlIHRoZSB2aXRlIGRlZmluZSB2YXJpYWJsZSBpbiB0aGlzIGNvbnRleHRcbiAgYXdhaXQgcnVubmVyLmV4ZWN1dGVJZCgnL0B2aXRlL2VudicpXG5cbiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKVxuICAgIGF3YWl0IHJ1bm5lci5leGVjdXRlRmlsZShmaWxlKVxuXG4gIGlmICghb3B0aW9ucy53YXRjaClcbiAgICBhd2FpdCBzZXJ2ZXIuY2xvc2UoKVxuXG4gIHNlcnZlci53YXRjaGVyLm9uKCdjaGFuZ2UnLCBhc3luYyhldmVudE5hbWUsIHBhdGgpID0+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUubG9nKGRpbShgWyR7ZXZlbnROYW1lfV0gJHtwYXRofWApKVxuXG4gICAgLy8gaW52YWxpZGF0ZSBtb2R1bGUgY2FjaGUgYnV0IG5vdCBub2RlX21vZHVsZXNcbiAgICBBcnJheS5mcm9tKHJ1bm5lci5tb2R1bGVDYWNoZS5rZXlzKCkpXG4gICAgICAuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgICBpZiAoIWkuaW5jbHVkZXMoJ25vZGVfbW9kdWxlcycpKVxuICAgICAgICAgIHJ1bm5lci5tb2R1bGVDYWNoZS5kZWxldGUoaSlcbiAgICAgIH0pXG5cbiAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpXG4gICAgICBhd2FpdCBydW5uZXIuZXhlY3V0ZUZpbGUoZmlsZSlcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJtaW5pbWlzdCIsInJlZCIsImRpbSIsInNlcnZlciIsImNyZWF0ZVNlcnZlciIsIlZpdGVOb2RlU2VydmVyIiwiVml0ZU5vZGVSdW5uZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFNQSxNQUFNLElBQU8sR0FBQUEsNEJBQUEsQ0FBUyxPQUFRLENBQUEsSUFBQSxDQUFLLE1BQU0sQ0FBSSxDQUFBLEVBQUE7QUFBQSxFQUMzQyxPQUFTLEVBQUE7QUFBQSxJQUNQLENBQUcsRUFBQSxNQUFBO0FBQUEsSUFDSCxDQUFHLEVBQUEsUUFBQTtBQUFBLElBQ0gsQ0FBRyxFQUFBLE1BQUE7QUFBQSxJQUNILENBQUcsRUFBQSxPQUFBO0FBQUEsSUFDSCxDQUFHLEVBQUEsUUFBQTtBQUFBLEdBQUE7QUFBQSxFQUVMLElBQU0sRUFBQSxJQUFBO0FBQUEsRUFDTixRQUFBLEVBQVUsQ0FBQyxNQUFRLEVBQUEsUUFBQSxDQUFBO0FBQUEsRUFDbkIsU0FBQSxFQUFXLENBQUMsTUFBQSxFQUFRLE9BQVMsRUFBQSxRQUFBLENBQUE7QUFBQSxFQUM3QixRQUFRLElBQWMsRUFBQTtBQUNwQixJQUFJLElBQUEsSUFBQSxDQUFLLE9BQU8sR0FBSyxFQUFBO0FBQ25CLE1BQVEsT0FBQSxDQUFBLEtBQUEsQ0FBTUMsYUFBSSxDQUFxQixrQkFBQSxFQUFBLElBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ3ZDLE1BQUEsSUFBQSxFQUFBLENBQUE7QUFDQSxNQUFBLE9BQUEsQ0FBUSxJQUFLLENBQUEsQ0FBQSxDQUFBLENBQUE7QUFBQSxLQUFBO0FBRWYsSUFBTyxPQUFB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
