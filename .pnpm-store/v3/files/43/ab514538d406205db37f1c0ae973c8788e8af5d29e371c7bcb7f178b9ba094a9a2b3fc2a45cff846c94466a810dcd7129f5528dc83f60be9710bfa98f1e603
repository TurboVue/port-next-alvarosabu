/// <reference types="node" />
import chokidar from 'chokidar';
import fs from 'fs-extra';
import type { ConfigMode, HistoireConfig } from './config.js';
import type { Context } from './context.js';
import type { ModuleLoader } from './load.js';
import type { Story, Variant } from './types.js';
export interface Plugin {
    /**
     * Name of the plugin
     */
    name: string;
    /**
     * Modify histoire config. The hook can either mutate the passed config or
     * return a partial config object that will be deeply merged into the existing
     * config.
     *
     * Note: User plugins are resolved before running this hook so injecting other
     * plugins inside  the `config` hook will have no effect.
     */
    config?: (config: HistoireConfig, mode: ConfigMode) => Partial<HistoireConfig> | null | void | Promise<Partial<HistoireConfig> | null | void>;
    /**
     * Use this hook to read and store the final resolved histoire config.
     */
    configResolved?: (config: HistoireConfig) => void | Promise<void>;
    /**
     * Use this hook to do processing during development. The `onCleanup` hook
     * should handle cleanup tasks when development server is closed.
     */
    onDev?: (api: DevPluginApi, onCleanup: (cb: () => void | Promise<void>) => void) => void | Promise<void>;
    /**
     * Use this hook to do processing during production build.
     */
    onBuild?: (api: BuildPluginApi) => void | Promise<void>;
}
export declare class BasePluginApi {
    protected ctx: Context;
    protected plugin: Plugin;
    moduleLoader: ModuleLoader;
    colors: import("picocolors/types").Colors & {
        createColors: (enabled?: boolean) => import("picocolors/types").Colors;
    };
    path: Omit<import("path").PlatformPath, "win32" | "posix">;
    fs: typeof fs;
    constructor(ctx: Context, plugin: Plugin, moduleLoader: ModuleLoader);
    get pluginTempDir(): string;
    log(...msg: any[]): void;
    warn(...msg: any[]): void;
    error(...msg: any[]): void;
    addStoryFile(file: string): void;
}
export declare class DevPluginApi extends BasePluginApi {
    watcher: typeof chokidar;
}
export declare type BuildEndCallback = () => Promise<void> | void;
export declare type PreviewStoryCallback = (payload: {
    file: string;
    story: Story;
    variant: Variant;
    url: string;
}) => Promise<void> | void;
export declare class BuildPluginApi extends BasePluginApi {
    buildEndCallbacks: BuildEndCallback[];
    previewStoryCallbacks: PreviewStoryCallback[];
    onBuildEnd(cb: BuildEndCallback): void;
    onPreviewStory(cb: PreviewStoryCallback): void;
}
