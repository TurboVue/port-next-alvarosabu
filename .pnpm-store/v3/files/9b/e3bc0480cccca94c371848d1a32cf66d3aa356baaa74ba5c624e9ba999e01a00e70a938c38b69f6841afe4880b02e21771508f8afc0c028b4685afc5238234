'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var module$1 = require('module');
var url = require('url');
var vm = require('vm');
var pathe = require('pathe');
var mlly = require('mlly');
var utils = require('./utils.cjs');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var vm__default = /*#__PURE__*/_interopDefaultLegacy(vm);

const DEFAULT_REQUEST_STUBS = {
  "/@vite/client": {
    injectQuery: (id) => id,
    createHotContext() {
      return {
        accept: () => {
        },
        prune: () => {
        },
        dispose: () => {
        },
        decline: () => {
        },
        invalidate: () => {
        },
        on: () => {
        }
      };
    },
    updateStyle() {
    }
  }
};
class ModuleCacheMap extends Map {
  normalizePath(fsPath) {
    return fsPath.replace(/\\/g, "/").replace(/^\/@fs\//, "/").replace(/^file:\//, "/").replace(/^\/+/, "/");
  }
  set(fsPath, mod) {
    fsPath = this.normalizePath(fsPath);
    if (!super.has(fsPath))
      super.set(fsPath, mod);
    else
      Object.assign(super.get(fsPath), mod);
    return this;
  }
  get(fsPath) {
    fsPath = this.normalizePath(fsPath);
    return super.get(fsPath);
  }
  delete(fsPath) {
    fsPath = this.normalizePath(fsPath);
    return super.delete(fsPath);
  }
}
class ViteNodeRunner {
  constructor(options) {
    this.options = options;
    this.root = options.root || process.cwd();
    this.moduleCache = options.moduleCache || new ModuleCacheMap();
  }
  async executeFile(file) {
    return await this.cachedRequest(`/@fs/${utils.slash(pathe.resolve(file))}`, []);
  }
  async executeId(id) {
    return await this.cachedRequest(id, []);
  }
  async cachedRequest(rawId, callstack) {
    var _a, _b;
    const id = utils.normalizeId(rawId, this.options.base);
    const fsPath = utils.toFilePath(id, this.root);
    if ((_a = this.moduleCache.get(fsPath)) == null ? void 0 : _a.promise)
      return (_b = this.moduleCache.get(fsPath)) == null ? void 0 : _b.promise;
    const promise = this.directRequest(id, fsPath, callstack);
    this.moduleCache.set(fsPath, { promise });
    return await promise;
  }
  async directRequest(id, fsPath, callstack) {
    callstack = [...callstack, id];
    const request = async (dep) => {
      var _a, _b;
      if (this.options.resolveId && this.shouldResolveId(dep)) {
        const resolvedDep = await this.options.resolveId(dep, id);
        dep = ((_a = resolvedDep == null ? void 0 : resolvedDep.id) == null ? void 0 : _a.replace(this.root, "")) || dep;
      }
      if (callstack.includes(dep)) {
        if (!((_b = this.moduleCache.get(dep)) == null ? void 0 : _b.exports))
          throw new Error(`[vite-node] Circular dependency detected
Stack:
${[...callstack, dep].reverse().map((p) => `- ${p}`).join("\n")}`);
        return this.moduleCache.get(dep).exports;
      }
      return this.cachedRequest(dep, callstack);
    };
    const requestStubs = this.options.requestStubs || DEFAULT_REQUEST_STUBS;
    if (id in requestStubs)
      return requestStubs[id];
    const { code: transformed, externalize } = await this.options.fetchModule(id);
    if (externalize) {
      const mod = await this.interopedImport(externalize);
      this.moduleCache.set(fsPath, { exports: mod });
      return mod;
    }
    if (transformed == null)
      throw new Error(`[vite-node] Failed to load ${id}`);
    const url$1 = url.pathToFileURL(fsPath).href;
    const exports = Object.create(null);
    exports[Symbol.toStringTag] = "Module";
    this.moduleCache.set(id, { code: transformed, exports });
    const __filename = url.fileURLToPath(url$1);
    const moduleProxy = {
      set exports(value) {
        exportAll(exports, value);
        exports.default = value;
      },
      get exports() {
        return exports.default;
      }
    };
    const context = this.prepareContext({
      __vite_ssr_import__: request,
      __vite_ssr_dynamic_import__: request,
      __vite_ssr_exports__: exports,
      __vite_ssr_exportAll__: (obj) => exportAll(exports, obj),
      __vite_ssr_import_meta__: { url: url$1 },
      require: module$1.createRequire(url$1),
      exports,
      module: moduleProxy,
      __filename,
      __dirname: pathe.dirname(__filename)
    });
    const fn = vm__default["default"].runInThisContext(`'use strict';async (${Object.keys(context).join(",")})=>{{${transformed}
}}`, {
      filename: fsPath,
      lineOffset: 0
    });
    await fn(...Object.values(context));
    return exports;
  }
  prepareContext(context) {
    return context;
  }
  shouldResolveId(dep) {
    if (mlly.isNodeBuiltin(dep) || dep in (this.options.requestStubs || DEFAULT_REQUEST_STUBS))
      return false;
    return !pathe.isAbsolute(dep) || !pathe.extname(dep);
  }
  shouldInterop(path, mod) {
    if (this.options.interopDefault === false)
      return false;
    return !path.endsWith(".mjs") && "default" in mod;
  }
  async interopedImport(path) {
    const mod = await (function (t) { return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require(t)); }); })(path);
    if (this.shouldInterop(path, mod)) {
      const tryDefault = this.hasNestedDefault(mod);
      return new Proxy(mod, {
        get: proxyMethod("get", tryDefault),
        set: proxyMethod("set", tryDefault),
        has: proxyMethod("has", tryDefault),
        deleteProperty: proxyMethod("deleteProperty", tryDefault)
      });
    }
    return mod;
  }
  hasNestedDefault(target) {
    return "__esModule" in target && target.__esModule && "default" in target.default;
  }
}
function proxyMethod(name, tryDefault) {
  return function(target, key, ...args) {
    const result = Reflect[name](target, key, ...args);
    if (utils.isPrimitive(target.default))
      return result;
    if (tryDefault && key === "default" || typeof result === "undefined")
      return Reflect[name](target.default, key, ...args);
    return result;
  };
}
function exportAll(exports, sourceModule) {
  for (const key in sourceModule) {
    if (key !== "default") {
      try {
        Object.defineProperty(exports, key, {
          enumerable: true,
          configurable: true,
          get() {
            return sourceModule[key];
          }
        });
      } catch (_err) {
      }
    }
  }
}

exports.DEFAULT_REQUEST_STUBS = DEFAULT_REQUEST_STUBS;
exports.ModuleCacheMap = ModuleCacheMap;
exports.ViteNodeRunner = ViteNodeRunner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LmNqcyIsInNvdXJjZXMiOlsiLi4vc3JjL2NsaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVSZXF1aXJlIH0gZnJvbSAnbW9kdWxlJ1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCwgcGF0aFRvRmlsZVVSTCB9IGZyb20gJ3VybCdcbmltcG9ydCB2bSBmcm9tICd2bSdcbmltcG9ydCB7IGRpcm5hbWUsIGV4dG5hbWUsIGlzQWJzb2x1dGUsIHJlc29sdmUgfSBmcm9tICdwYXRoZSdcbmltcG9ydCB7IGlzTm9kZUJ1aWx0aW4gfSBmcm9tICdtbGx5J1xuaW1wb3J0IHsgaXNQcmltaXRpdmUsIG5vcm1hbGl6ZUlkLCBzbGFzaCwgdG9GaWxlUGF0aCB9IGZyb20gJy4vdXRpbHMnXG5pbXBvcnQgdHlwZSB7IE1vZHVsZUNhY2hlLCBWaXRlTm9kZVJ1bm5lck9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJ1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9SRVFVRVNUX1NUVUJTID0ge1xuICAnL0B2aXRlL2NsaWVudCc6IHtcbiAgICBpbmplY3RRdWVyeTogKGlkOiBzdHJpbmcpID0+IGlkLFxuICAgIGNyZWF0ZUhvdENvbnRleHQoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhY2NlcHQ6ICgpID0+IHt9LFxuICAgICAgICBwcnVuZTogKCkgPT4ge30sXG4gICAgICAgIGRpc3Bvc2U6ICgpID0+IHt9LFxuICAgICAgICBkZWNsaW5lOiAoKSA9PiB7fSxcbiAgICAgICAgaW52YWxpZGF0ZTogKCkgPT4ge30sXG4gICAgICAgIG9uOiAoKSA9PiB7fSxcbiAgICAgIH1cbiAgICB9LFxuICAgIHVwZGF0ZVN0eWxlKCkge30sXG4gIH0sXG59XG5cbmV4cG9ydCBjbGFzcyBNb2R1bGVDYWNoZU1hcCBleHRlbmRzIE1hcDxzdHJpbmcsIE1vZHVsZUNhY2hlPiB7XG4gIG5vcm1hbGl6ZVBhdGgoZnNQYXRoOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gZnNQYXRoXG4gICAgICAucmVwbGFjZSgvXFxcXC9nLCAnLycpXG4gICAgICAucmVwbGFjZSgvXlxcL0Bmc1xcLy8sICcvJylcbiAgICAgIC5yZXBsYWNlKC9eZmlsZTpcXC8vLCAnLycpXG4gICAgICAucmVwbGFjZSgvXlxcLysvLCAnLycpXG4gIH1cblxuICBzZXQoZnNQYXRoOiBzdHJpbmcsIG1vZDogUGFydGlhbDxNb2R1bGVDYWNoZT4pIHtcbiAgICBmc1BhdGggPSB0aGlzLm5vcm1hbGl6ZVBhdGgoZnNQYXRoKVxuICAgIGlmICghc3VwZXIuaGFzKGZzUGF0aCkpXG4gICAgICBzdXBlci5zZXQoZnNQYXRoLCBtb2QpXG4gICAgZWxzZVxuICAgICAgT2JqZWN0LmFzc2lnbihzdXBlci5nZXQoZnNQYXRoKSwgbW9kKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBnZXQoZnNQYXRoOiBzdHJpbmcpIHtcbiAgICBmc1BhdGggPSB0aGlzLm5vcm1hbGl6ZVBhdGgoZnNQYXRoKVxuICAgIHJldHVybiBzdXBlci5nZXQoZnNQYXRoKVxuICB9XG5cbiAgZGVsZXRlKGZzUGF0aDogc3RyaW5nKSB7XG4gICAgZnNQYXRoID0gdGhpcy5ub3JtYWxpemVQYXRoKGZzUGF0aClcbiAgICByZXR1cm4gc3VwZXIuZGVsZXRlKGZzUGF0aClcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVml0ZU5vZGVSdW5uZXIge1xuICByb290OiBzdHJpbmdcblxuICAvKipcbiAgICogSG9sZHMgdGhlIGNhY2hlIG9mIG1vZHVsZXNcbiAgICogS2V5cyBvZiB0aGUgbWFwIGFyZSBmaWxlcGF0aHMsIG9yIHBsYWluIHBhY2thZ2UgbmFtZXNcbiAgICovXG4gIG1vZHVsZUNhY2hlOiBNb2R1bGVDYWNoZU1hcFxuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBvcHRpb25zOiBWaXRlTm9kZVJ1bm5lck9wdGlvbnMpIHtcbiAgICB0aGlzLnJvb3QgPSBvcHRpb25zLnJvb3QgfHwgcHJvY2Vzcy5jd2QoKVxuICAgIHRoaXMubW9kdWxlQ2FjaGUgPSBvcHRpb25zLm1vZHVsZUNhY2hlIHx8IG5ldyBNb2R1bGVDYWNoZU1hcCgpXG4gIH1cblxuICBhc3luYyBleGVjdXRlRmlsZShmaWxlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jYWNoZWRSZXF1ZXN0KGAvQGZzLyR7c2xhc2gocmVzb2x2ZShmaWxlKSl9YCwgW10pXG4gIH1cblxuICBhc3luYyBleGVjdXRlSWQoaWQ6IHN0cmluZykge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNhY2hlZFJlcXVlc3QoaWQsIFtdKVxuICB9XG5cbiAgYXN5bmMgY2FjaGVkUmVxdWVzdChyYXdJZDogc3RyaW5nLCBjYWxsc3RhY2s6IHN0cmluZ1tdKSB7XG4gICAgY29uc3QgaWQgPSBub3JtYWxpemVJZChyYXdJZCwgdGhpcy5vcHRpb25zLmJhc2UpXG4gICAgY29uc3QgZnNQYXRoID0gdG9GaWxlUGF0aChpZCwgdGhpcy5yb290KVxuXG4gICAgaWYgKHRoaXMubW9kdWxlQ2FjaGUuZ2V0KGZzUGF0aCk/LnByb21pc2UpXG4gICAgICByZXR1cm4gdGhpcy5tb2R1bGVDYWNoZS5nZXQoZnNQYXRoKT8ucHJvbWlzZVxuXG4gICAgY29uc3QgcHJvbWlzZSA9IHRoaXMuZGlyZWN0UmVxdWVzdChpZCwgZnNQYXRoLCBjYWxsc3RhY2spXG4gICAgdGhpcy5tb2R1bGVDYWNoZS5zZXQoZnNQYXRoLCB7IHByb21pc2UgfSlcblxuICAgIHJldHVybiBhd2FpdCBwcm9taXNlXG4gIH1cblxuICBhc3luYyBkaXJlY3RSZXF1ZXN0KGlkOiBzdHJpbmcsIGZzUGF0aDogc3RyaW5nLCBjYWxsc3RhY2s6IHN0cmluZ1tdKSB7XG4gICAgY2FsbHN0YWNrID0gWy4uLmNhbGxzdGFjaywgaWRdXG4gICAgY29uc3QgcmVxdWVzdCA9IGFzeW5jKGRlcDogc3RyaW5nKSA9PiB7XG4gICAgICAvLyBwcm9iYWJseSBtZWFucyBpdCB3YXMgcGFzc2VkIGFzIHZhcmlhYmxlXG4gICAgICAvLyBhbmQgd2Fzbid0IHRyYW5zZm9ybWVkIGJ5IFZpdGVcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVzb2x2ZUlkICYmIHRoaXMuc2hvdWxkUmVzb2x2ZUlkKGRlcCkpIHtcbiAgICAgICAgY29uc3QgcmVzb2x2ZWREZXAgPSBhd2FpdCB0aGlzLm9wdGlvbnMucmVzb2x2ZUlkKGRlcCwgaWQpXG4gICAgICAgIGRlcCA9IHJlc29sdmVkRGVwPy5pZD8ucmVwbGFjZSh0aGlzLnJvb3QsICcnKSB8fCBkZXBcbiAgICAgIH1cblxuICAgICAgaWYgKGNhbGxzdGFjay5pbmNsdWRlcyhkZXApKSB7XG4gICAgICAgIGlmICghdGhpcy5tb2R1bGVDYWNoZS5nZXQoZGVwKT8uZXhwb3J0cylcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFt2aXRlLW5vZGVdIENpcmN1bGFyIGRlcGVuZGVuY3kgZGV0ZWN0ZWRcXG5TdGFjazpcXG4ke1suLi5jYWxsc3RhY2ssIGRlcF0ucmV2ZXJzZSgpLm1hcChwID0+IGAtICR7cH1gKS5qb2luKCdcXG4nKX1gKVxuICAgICAgICByZXR1cm4gdGhpcy5tb2R1bGVDYWNoZS5nZXQoZGVwKSEuZXhwb3J0c1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVkUmVxdWVzdChkZXAsIGNhbGxzdGFjaylcbiAgICB9XG5cbiAgICBjb25zdCByZXF1ZXN0U3R1YnMgPSB0aGlzLm9wdGlvbnMucmVxdWVzdFN0dWJzIHx8IERFRkFVTFRfUkVRVUVTVF9TVFVCU1xuICAgIGlmIChpZCBpbiByZXF1ZXN0U3R1YnMpXG4gICAgICByZXR1cm4gcmVxdWVzdFN0dWJzW2lkXVxuXG4gICAgY29uc3QgeyBjb2RlOiB0cmFuc2Zvcm1lZCwgZXh0ZXJuYWxpemUgfSA9IGF3YWl0IHRoaXMub3B0aW9ucy5mZXRjaE1vZHVsZShpZClcbiAgICBpZiAoZXh0ZXJuYWxpemUpIHtcbiAgICAgIGNvbnN0IG1vZCA9IGF3YWl0IHRoaXMuaW50ZXJvcGVkSW1wb3J0KGV4dGVybmFsaXplKVxuICAgICAgdGhpcy5tb2R1bGVDYWNoZS5zZXQoZnNQYXRoLCB7IGV4cG9ydHM6IG1vZCB9KVxuICAgICAgcmV0dXJuIG1vZFxuICAgIH1cblxuICAgIGlmICh0cmFuc2Zvcm1lZCA9PSBudWxsKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBbdml0ZS1ub2RlXSBGYWlsZWQgdG8gbG9hZCAke2lkfWApXG5cbiAgICAvLyBkaXNhbWJpZ3VhdGUgdGhlIGA8VU5JVD46L2Agb24gd2luZG93czogc2VlIG5vZGVqcy9ub2RlIzMxNzEwXG4gICAgY29uc3QgdXJsID0gcGF0aFRvRmlsZVVSTChmc1BhdGgpLmhyZWZcbiAgICBjb25zdCBleHBvcnRzOiBhbnkgPSBPYmplY3QuY3JlYXRlKG51bGwpXG4gICAgZXhwb3J0c1tTeW1ib2wudG9TdHJpbmdUYWddID0gJ01vZHVsZSdcblxuICAgIHRoaXMubW9kdWxlQ2FjaGUuc2V0KGlkLCB7IGNvZGU6IHRyYW5zZm9ybWVkLCBleHBvcnRzIH0pXG5cbiAgICBjb25zdCBfX2ZpbGVuYW1lID0gZmlsZVVSTFRvUGF0aCh1cmwpXG4gICAgY29uc3QgbW9kdWxlUHJveHkgPSB7XG4gICAgICBzZXQgZXhwb3J0cyh2YWx1ZSkge1xuICAgICAgICBleHBvcnRBbGwoZXhwb3J0cywgdmFsdWUpXG4gICAgICAgIGV4cG9ydHMuZGVmYXVsdCA9IHZhbHVlXG4gICAgICB9LFxuICAgICAgZ2V0IGV4cG9ydHMoKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLmRlZmF1bHRcbiAgICAgIH0sXG4gICAgfVxuXG4gICAgLy8gQmUgY2FyZWZ1bCB3aGVuIGNoYW5naW5nIHRoaXNcbiAgICAvLyBjaGFuZ2luZyBjb250ZXh0IHdpbGwgY2hhbmdlIGFtb3VudCBvZiBjb2RlIGFkZGVkIG9uIGxpbmUgOjExNCAodm0ucnVuSW5UaGlzQ29udGV4dClcbiAgICAvLyB0aGlzIG1lc3NlcyB1cCBzb3VyY2VtYXBzIGZvciBjb3ZlcmFnZVxuICAgIC8vIGFkanVzdCBgb2Zmc2V0YCB2YXJpYWJsZSBpbiBwYWNrYWdlcy92aXRlc3Qvc3JjL2ludGVncmF0aW9ucy9jb3ZlcmFnZS50cyNMMTAwIGlmIHlvdSBkbyBjaGFuZ2UgdGhpc1xuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLnByZXBhcmVDb250ZXh0KHtcbiAgICAgIC8vIGVzbSB0cmFuc2Zvcm1lZCBieSBWaXRlXG4gICAgICBfX3ZpdGVfc3NyX2ltcG9ydF9fOiByZXF1ZXN0LFxuICAgICAgX192aXRlX3Nzcl9keW5hbWljX2ltcG9ydF9fOiByZXF1ZXN0LFxuICAgICAgX192aXRlX3Nzcl9leHBvcnRzX186IGV4cG9ydHMsXG4gICAgICBfX3ZpdGVfc3NyX2V4cG9ydEFsbF9fOiAob2JqOiBhbnkpID0+IGV4cG9ydEFsbChleHBvcnRzLCBvYmopLFxuICAgICAgX192aXRlX3Nzcl9pbXBvcnRfbWV0YV9fOiB7IHVybCB9LFxuXG4gICAgICAvLyBjanMgY29tcGFjdFxuICAgICAgcmVxdWlyZTogY3JlYXRlUmVxdWlyZSh1cmwpLFxuICAgICAgZXhwb3J0cyxcbiAgICAgIG1vZHVsZTogbW9kdWxlUHJveHksXG4gICAgICBfX2ZpbGVuYW1lLFxuICAgICAgX19kaXJuYW1lOiBkaXJuYW1lKF9fZmlsZW5hbWUpLFxuICAgIH0pXG5cbiAgICAvLyBhZGQgJ3VzZSBzdHJpY3QnIHNpbmNlIEVTTSBlbmFibGVzIGl0IGJ5IGRlZmF1bHRcbiAgICBjb25zdCBmbiA9IHZtLnJ1bkluVGhpc0NvbnRleHQoYCd1c2Ugc3RyaWN0Jzthc3luYyAoJHtPYmplY3Qua2V5cyhjb250ZXh0KS5qb2luKCcsJyl9KT0+e3ske3RyYW5zZm9ybWVkfVxcbn19YCwge1xuICAgICAgZmlsZW5hbWU6IGZzUGF0aCxcbiAgICAgIGxpbmVPZmZzZXQ6IDAsXG4gICAgfSlcblxuICAgIGF3YWl0IGZuKC4uLk9iamVjdC52YWx1ZXMoY29udGV4dCkpXG5cbiAgICByZXR1cm4gZXhwb3J0c1xuICB9XG5cbiAgcHJlcGFyZUNvbnRleHQoY29udGV4dDogUmVjb3JkPHN0cmluZywgYW55Pikge1xuICAgIHJldHVybiBjb250ZXh0XG4gIH1cblxuICBzaG91bGRSZXNvbHZlSWQoZGVwOiBzdHJpbmcpIHtcbiAgICBpZiAoaXNOb2RlQnVpbHRpbihkZXApIHx8IGRlcCBpbiAodGhpcy5vcHRpb25zLnJlcXVlc3RTdHVicyB8fCBERUZBVUxUX1JFUVVFU1RfU1RVQlMpKVxuICAgICAgcmV0dXJuIGZhbHNlXG5cbiAgICByZXR1cm4gIWlzQWJzb2x1dGUoZGVwKSB8fCAhZXh0bmFtZShkZXApXG4gIH1cblxuICAvKipcbiAgICogRGVmaW5lIGlmIGEgbW9kdWxlIHNob3VsZCBiZSBpbnRlcm9wLWVkXG4gICAqIFRoaXMgZnVuY3Rpb24gbW9zdGx5IGZvciB0aGUgYWJpbGl0eSB0byBvdmVycmlkZSBieSBzdWJjbGFzc1xuICAgKi9cbiAgc2hvdWxkSW50ZXJvcChwYXRoOiBzdHJpbmcsIG1vZDogYW55KSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5pbnRlcm9wRGVmYXVsdCA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICAvLyBuZXZlciBpbnRlcm9wIEVTTSBtb2R1bGVzXG4gICAgLy8gVE9ETzogc2hvdWxkIGFsc28gc2tpcCBmb3IgYC5qc2Agd2l0aCBgdHlwZT1cIm1vZHVsZVwiYFxuICAgIHJldHVybiAhcGF0aC5lbmRzV2l0aCgnLm1qcycpICYmICdkZWZhdWx0JyBpbiBtb2RcbiAgfVxuXG4gIC8qKlxuICAgKiBJbXBvcnQgYSBtb2R1bGUgYW5kIGludGVyb3AgaXRcbiAgICovXG4gIGFzeW5jIGludGVyb3BlZEltcG9ydChwYXRoOiBzdHJpbmcpIHtcbiAgICBjb25zdCBtb2QgPSBhd2FpdCBpbXBvcnQocGF0aClcblxuICAgIGlmICh0aGlzLnNob3VsZEludGVyb3AocGF0aCwgbW9kKSkge1xuICAgICAgY29uc3QgdHJ5RGVmYXVsdCA9IHRoaXMuaGFzTmVzdGVkRGVmYXVsdChtb2QpXG4gICAgICByZXR1cm4gbmV3IFByb3h5KG1vZCwge1xuICAgICAgICBnZXQ6IHByb3h5TWV0aG9kKCdnZXQnLCB0cnlEZWZhdWx0KSxcbiAgICAgICAgc2V0OiBwcm94eU1ldGhvZCgnc2V0JywgdHJ5RGVmYXVsdCksXG4gICAgICAgIGhhczogcHJveHlNZXRob2QoJ2hhcycsIHRyeURlZmF1bHQpLFxuICAgICAgICBkZWxldGVQcm9wZXJ0eTogcHJveHlNZXRob2QoJ2RlbGV0ZVByb3BlcnR5JywgdHJ5RGVmYXVsdCksXG4gICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiBtb2RcbiAgfVxuXG4gIGhhc05lc3RlZERlZmF1bHQodGFyZ2V0OiBhbnkpIHtcbiAgICByZXR1cm4gJ19fZXNNb2R1bGUnIGluIHRhcmdldCAmJiB0YXJnZXQuX19lc01vZHVsZSAmJiAnZGVmYXVsdCcgaW4gdGFyZ2V0LmRlZmF1bHRcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm94eU1ldGhvZChuYW1lOiAnZ2V0JyB8ICdzZXQnIHwgJ2hhcycgfCAnZGVsZXRlUHJvcGVydHknLCB0cnlEZWZhdWx0OiBib29sZWFuKSB7XG4gIHJldHVybiBmdW5jdGlvbih0YXJnZXQ6IGFueSwga2V5OiBzdHJpbmcgfCBzeW1ib2wsIC4uLmFyZ3M6IFthbnk/LCBhbnk/XSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3RbbmFtZV0odGFyZ2V0LCBrZXksIC4uLmFyZ3MpXG4gICAgaWYgKGlzUHJpbWl0aXZlKHRhcmdldC5kZWZhdWx0KSlcbiAgICAgIHJldHVybiByZXN1bHRcbiAgICBpZiAoKHRyeURlZmF1bHQgJiYga2V5ID09PSAnZGVmYXVsdCcpIHx8IHR5cGVvZiByZXN1bHQgPT09ICd1bmRlZmluZWQnKVxuICAgICAgcmV0dXJuIFJlZmxlY3RbbmFtZV0odGFyZ2V0LmRlZmF1bHQsIGtleSwgLi4uYXJncylcbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cbn1cblxuZnVuY3Rpb24gZXhwb3J0QWxsKGV4cG9ydHM6IGFueSwgc291cmNlTW9kdWxlOiBhbnkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gIGZvciAoY29uc3Qga2V5IGluIHNvdXJjZU1vZHVsZSkge1xuICAgIGlmIChrZXkgIT09ICdkZWZhdWx0Jykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldCgpIHsgcmV0dXJuIHNvdXJjZU1vZHVsZVtrZXldIH0sXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBjYXRjaCAoX2VycikgeyB9XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsic2xhc2giLCJyZXNvbHZlIiwibm9ybWFsaXplSWQiLCJ0b0ZpbGVQYXRoIiwidXJsIiwicGF0aFRvRmlsZVVSTCIsImZpbGVVUkxUb1BhdGgiLCJjcmVhdGVSZXF1aXJlIiwiZGlybmFtZSIsInZtIiwiaXNOb2RlQnVpbHRpbiIsImlzQWJzb2x1dGUiLCJleHRuYW1lIiwiaXNQcmltaXRpdmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVFPLE1BQU0scUJBQXdCLEdBQUE7QUFBQSxFQUNuQyxlQUFpQixFQUFBO0FBQUEsSUFDZixXQUFBLEVBQWEsQ0FBQyxFQUFlLEtBQUEsRUFBQTtBQUFBLElBQzdCLGdCQUFtQixHQUFBO0FBQ2pCLE1BQU8sT0FBQTtBQUFBLFFBQ0wsUUFBUSxNQUFNO0FBQUEsU0FBQTtBQUFBLFFBQ2QsT0FBTyxNQUFNO0FBQUEsU0FBQTtBQUFBLFFBQ2IsU0FBUyxNQUFNO0FBQUEsU0FBQTtBQUFBLFFBQ2YsU0FBUyxNQUFNO0FBQUEsU0FBQTtBQUFBLFFBQ2YsWUFBWSxNQUFNO0FBQUEsU0FBQTtBQUFBLFFBQ2xCLElBQUksTUFBTTtBQUFBLFNBQUE7QUFBQSxPQUFBLENBQUE7QUFBQSxLQUFBO0FBQUEsSUFHZCxXQUFjLEdBQUE7QUFBQSxLQUFBO0FBQUEsR0FB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
